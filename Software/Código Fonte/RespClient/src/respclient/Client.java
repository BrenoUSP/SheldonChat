package respclient;

import java.io.*;
import java.net.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.text.StyledEditorKit;

public class Client extends javax.swing.JFrame implements KeyListener {

    private ObjectOutputStream output;
    private ObjectInputStream input;
    private String message = "";
    boolean conectado = true;
    private String serverIP;
    boolean botLigado = true;
    private Socket connection;

    String nomeBot = "";

    //constructor
    public Client(String host) {
        initComponents();
        setTitle("Comunicação para o Responsável - Diálogo com Paciente");
        setResizable(false);
        serverIP = host;
        chatWindow.setEditable(false);
        userText.requestFocusInWindow();
        userText.addKeyListener(this);
        chatWindow.setContentType("text/html");
        chatWindow.setEditorKit(new StyledEditorKit());
        chatWindow.putClientProperty(JEditorPane.HONOR_DISPLAY_PROPERTIES, Boolean.TRUE);
        chatWindow.setFont(new Font("Trebuchet MS", Font.BOLD, 20));
        userText.setContentType("text/html");
        userText.setEditorKit(new StyledEditorKit());
        userText.putClientProperty(JEditorPane.HONOR_DISPLAY_PROPERTIES, Boolean.TRUE);
        userText.setFont(new Font("Trebuchet MS", Font.BOLD, 20));
    }

    //connect to server
    public void startRunning() {
        try {
            connectToServer();
            setupStreams();
            whileChatting();
        } catch (EOFException eofException) {
            //showMessage("\n Client terminated connection");
        } catch (IOException ioException) {
            ioException.printStackTrace();
        } finally {
            closeCrap();
        }
    }

    //connect to server
    private void connectToServer() throws IOException {
        addText("Tentando abrir conversa do paciente.. \n");
        connection = new Socket(InetAddress.getByName(serverIP), 6789);
        addText("\n\n\nConectado ao Paciente!\n");
    }

    //set up streams to send and receive messages
    private void setupStreams() throws IOException {
        output = new ObjectOutputStream(connection.getOutputStream());
        output.flush();
        input = new ObjectInputStream(connection.getInputStream());
        //showMessage("\n Dude your streams are now good to go! \n");
    }

    //while chatting with server
    private void whileChatting() throws IOException {
        ableToType(true);
        do {
            try {
                message = (String) input.readObject();
                showMessage("\n" + message);
            } catch (ClassNotFoundException classNotfoundException) {
                //showMessage("\n I dont know that object type");
            }
        } while (!message.equals("SERVER - END"));
    }

    //close the streams and sockets
    private void closeCrap() {
        showMessage("\nPaciente não está conectado!");
        ableToType(false);
        conectado = false;
        try {
            output.close();
            input.close();
            connection.close();
        } catch (IOException ioException) {
            ioException.printStackTrace();
        }
    }

    //send messages to server
    private void sendMessage(String message) {
        try {
            if (message.equals("DESATIVARBOTAGORA")) {
                output.writeObject("DESATIVARBOTAGORA");
            } else if (message.equals("ATIVARBOTAGORA")) {
                output.writeObject("ATIVARBOTAGORA");
            } else {
                output.writeObject("   Você: " + message);
                output.flush();
                showMessage("\n\n" + "   Você: " + message + "\n");
            }

        } catch (IOException ioException) {
            //chatWindow.append("\n something messed up sending message hoss!");
        }
    }

    //change/update chatWindow
    private void showMessage(final String m) {
        SwingUtilities.invokeLater(
                new Runnable() {
                    public void run() {
                        addText(m);
                    }
                }
        );
    }

    public void addText(String str) {
        chatWindow.setText(chatWindow.getText() + str);
    }

    //gives user permission to type crap into the text box
    private void ableToType(final boolean tof) {
        SwingUtilities.invokeLater(
                new Runnable() {
                    public void run() {
                        userText.setEditable(tof);
                    }
                }
        );
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        chatWindow = new javax.swing.JEditorPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        userText = new javax.swing.JEditorPane();
        jButtonAtivar = new javax.swing.JButton();
        jButtonEnviar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jScrollPane1.setViewportView(chatWindow);

        jScrollPane2.setViewportView(userText);

        jButtonAtivar.setText("Parar Bot");
        jButtonAtivar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAtivarActionPerformed(evt);
            }
        });

        jButtonEnviar.setText("Enviar");
        jButtonEnviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEnviarActionPerformed(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/ligado.png"))); // NOI18N

        jLabel2.setText("Ligado");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 768, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 504, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonEnviar, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(jLabel2))
                                    .addComponent(jLabel1))
                                .addGap(35, 35, 35))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jButtonAtivar, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(21, 21, 21))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonAtivar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2))
                    .addComponent(jScrollPane2)
                    .addComponent(jButtonEnviar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonEnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEnviarActionPerformed
        userText.setEditable(true);
        sendMessage(userText.getText());
        userText.setText("");
    }//GEN-LAST:event_jButtonEnviarActionPerformed

    private void jButtonAtivarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAtivarActionPerformed
        if (botLigado) {
            URL imageUrl = this.getClass().getResource("/Imagens/desligado.png");
            ImageIcon icon = new ImageIcon(imageUrl);
            Image img = icon.getImage();
            Image newimg = img.getScaledInstance(this.jLabel1.getWidth(), this.jLabel1.getHeight(), java.awt.Image.SCALE_SMOOTH);
            icon = new ImageIcon(newimg);
            this.jLabel1.setIcon(icon);
            sendMessage("DESATIVARBOTAGORA");
            botLigado = false;
            this.jLabel2.setText("Desativado");
            this.jButtonAtivar.setText("Ativar Bot");
        } else {
            URL imageUrl = this.getClass().getResource("/Imagens/ligado.png");
            ImageIcon icon = new ImageIcon(imageUrl);
            Image img = icon.getImage();
            Image newimg = img.getScaledInstance(this.jLabel1.getWidth(), this.jLabel1.getHeight(), java.awt.Image.SCALE_SMOOTH);
            icon = new ImageIcon(newimg);
            this.jLabel1.setIcon(icon);
            sendMessage("ATIVARBOTAGORA");
            botLigado = true;
            this.jLabel2.setText("Ativado");
            this.jButtonAtivar.setText("Parar Bot");
        }

    }//GEN-LAST:event_jButtonAtivarActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (conectado) {
            sendMessage("ATIVARBOTAGORA");
            botLigado = true;
        }
    }//GEN-LAST:event_formWindowClosing

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JEditorPane chatWindow;
    private javax.swing.JButton jButtonAtivar;
    private javax.swing.JButton jButtonEnviar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JEditorPane userText;
    // End of variables declaration//GEN-END:variables

    @Override
    public void keyTyped(KeyEvent e) {
    }

    @Override
    public void keyPressed(KeyEvent e) {
        try {
            if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                userText.setEditable(false);
                sendMessage(userText.getText());
                userText.setText("");
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    @Override
    public void keyReleased(KeyEvent e) {
        if (e.getKeyCode() == KeyEvent.VK_ENTER) {
            userText.setEditable(true);
        }
    }
}
