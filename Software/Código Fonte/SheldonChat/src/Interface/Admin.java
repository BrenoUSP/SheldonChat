/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;

import Controle.Bot;
import Controle.Estatistica;
import Controle.Logs;
import Controle.Paciente;
import Controle.Responsavel;
import Main.Main;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.KeyEventDispatcher;
import java.awt.KeyboardFocusManager;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.io.BufferedInputStream;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.InputStream;
import java.net.Inet4Address;
import java.net.URL;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import static java.util.Calendar.*;
import java.util.Date;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.swing.*;
import org.apache.commons.io.FileUtils;

/**
 *
 * @author Breno
 */
public class Admin extends javax.swing.JFrame {

    boolean respop = false;
    boolean botop = false;
    boolean pacop = false;
    Clip clip;

    /**
     * Creates new form MainBot
     */
    public Admin() {
        initComponents();
        URL imageUrl = this.getClass().getResource("/Imagens/frameIcon.png");
        ImageIcon img = new ImageIcon(imageUrl);
        setIconImage(img.getImage());

        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        int screenHeight = screenSize.height;
        int screenWidth = screenSize.width;

        if (screenWidth == 1920 && screenHeight == 1080) {
            setSize(786, 765);
        }
        //if (screenWidth == 1366 && screenHeight == 768) {
        //setSize(460, 440);
        //}

        KeyboardFocusManager manager = KeyboardFocusManager.getCurrentKeyboardFocusManager();
        manager.addKeyEventDispatcher(new MyDispatcher());

        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jSeparator2 = new javax.swing.JSeparator();
        SCA13ProjectPUEntityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("SCA13ProjectPU").createEntityManager();
        responsavelQuery = java.beans.Beans.isDesignTime() ? null : SCA13ProjectPUEntityManager.createQuery("SELECT r FROM Responsavel r");
        responsavelList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(responsavelQuery.getResultList());
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        botQuery = java.beans.Beans.isDesignTime() ? null : SCA13ProjectPUEntityManager.createQuery("SELECT b FROM Bot b");
        botList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(botQuery.getResultList());
        pacienteQuery = java.beans.Beans.isDesignTime() ? null : SCA13ProjectPUEntityManager.createQuery("SELECT p FROM Paciente p");
        pacienteList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(pacienteQuery.getResultList());
        jPanel1 = new javax.swing.JPanel();
        jLabelSenha = new javax.swing.JLabel();
        jPasswordField1 = new javax.swing.JPasswordField();
        jButtonConfirmarResp = new javax.swing.JButton();
        jLabelResponsavel = new javax.swing.JLabel();
        jPasswordField2 = new javax.swing.JPasswordField();
        jTextFieldResp = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableResp = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabelChoose = new javax.swing.JLabel();
        jToggleButtonMasc = new javax.swing.JToggleButton();
        jToggleButtonFem = new javax.swing.JToggleButton();
        jTextFieldNomeBot = new javax.swing.JTextField();
        jLabelNomeB = new javax.swing.JLabel();
        jButtonConfirmarBot = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableBot = new javax.swing.JTable();
        jSeparator3 = new javax.swing.JSeparator();
        jButtonHelp = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTablePaciente = new javax.swing.JTable();
        jButtonVerificarPaciente = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jTextFieldId = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jTextFieldNomePaciente = new javax.swing.JTextField();
        jRadioButtonMasc = new javax.swing.JRadioButton();
        jRadioButtonFem = new javax.swing.JRadioButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jCheckBoxSelecionado = new javax.swing.JCheckBox();
        jLabel10 = new javax.swing.JLabel();
        picker = new org.jdesktop.swingx.JXDatePicker();
        jButtonSalvar = new javax.swing.JButton();
        jButtonExcluir = new javax.swing.JButton();
        jTextFieldIP = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jButtonAnal = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("SheldonChat - Configuração do Responsável");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Registro do Responsável"));

        jLabelSenha.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        jLabelSenha.setText("Defina uma senha (Mínimo 5 caracteres e Máximo 15):");

        jButtonConfirmarResp.setText("Confirmar");
        jButtonConfirmarResp.setToolTipText("Confirmar senha para o Software");
        jButtonConfirmarResp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConfirmarRespActionPerformed(evt);
            }
        });

        jLabelResponsavel.setText("Nome:");

        jScrollPane2.setMinimumSize(new java.awt.Dimension(1, 1));

        jTableResp.setPreferredSize(new java.awt.Dimension(20, 20));
        jTableResp.setRowHeight(50);
        jTableResp.setRowMargin(50);

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, responsavelList, jTableResp);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${nomeResponsavel}"));
        columnBinding.setColumnName("Nome Responsavel");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${id}"));
        columnBinding.setColumnName("Id");
        columnBinding.setColumnClass(Long.class);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        jScrollPane2.setViewportView(jTableResp);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelResponsavel)
                    .addComponent(jTextFieldResp, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelSenha)
                    .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPasswordField2, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jButtonConfirmarResp, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelResponsavel)
                .addGap(9, 9, 9)
                .addComponent(jTextFieldResp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jLabelSenha)
                .addGap(18, 18, 18)
                .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPasswordField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonConfirmarResp, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(38, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "BOT"));

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabelChoose.setText("Escolha um BOT:");

        buttonGroup2.add(jToggleButtonMasc);
        jToggleButtonMasc.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/Masc.png"))); // NOI18N
        jToggleButtonMasc.setToolTipText("Masculino");
        jToggleButtonMasc.setFocusable(false);

        buttonGroup2.add(jToggleButtonFem);
        jToggleButtonFem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/Fem.png"))); // NOI18N
        jToggleButtonFem.setToolTipText("Feminino");
        jToggleButtonFem.setFocusable(false);

        jTextFieldNomeBot.setToolTipText("Digite o nome aqui!");

        jLabelNomeB.setText("Nome:");

        jButtonConfirmarBot.setText("Confirmar");
        jButtonConfirmarBot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConfirmarBotActionPerformed(evt);
            }
        });

        jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, botList, jTableBot);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${id}"));
        columnBinding.setColumnName("Id");
        columnBinding.setColumnClass(Long.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${nomeBot}"));
        columnBinding.setColumnName("Nome Bot");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${sexoBot}"));
        columnBinding.setColumnName("Sexo Bot");
        columnBinding.setColumnClass(String.class);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();

        jScrollPane3.setViewportView(jTableBot);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 164, Short.MAX_VALUE)
                        .addComponent(jLabelChoose)
                        .addGap(144, 144, 144))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jToggleButtonMasc)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45)
                        .addComponent(jToggleButtonFem))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabelNomeB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextFieldNomeBot, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonConfirmarBot)
                        .addGap(8, 8, 8)))
                .addGap(24, 24, 24))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(185, 185, 185)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabelChoose)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jToggleButtonMasc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jSeparator1)
                            .addComponent(jToggleButtonFem, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldNomeBot, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelNomeB)
                            .addComponent(jButtonConfirmarBot))))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jButtonHelp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/help.png"))); // NOI18N

        jLabel4.setText("Ajuda");

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Área do Paciente"));

        jTablePaciente.getTableHeader().setReorderingAllowed(false);

        jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, pacienteList, jTablePaciente);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${id}"));
        columnBinding.setColumnName("Id");
        columnBinding.setColumnClass(Long.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${nomePaciente}"));
        columnBinding.setColumnName("Nome Paciente");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${idadePaciente}"));
        columnBinding.setColumnName("Idade Paciente");
        columnBinding.setColumnClass(java.util.Date.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${sexoPaciente}"));
        columnBinding.setColumnName("Sexo Paciente");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${selecionado}"));
        columnBinding.setColumnName("Selecionado");
        columnBinding.setColumnClass(Boolean.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        jTablePaciente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTablePacienteMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTablePacienteMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTablePaciente);
        if (jTablePaciente.getColumnModel().getColumnCount() > 0) {
            jTablePaciente.getColumnModel().getColumn(0).setResizable(false);
            jTablePaciente.getColumnModel().getColumn(1).setResizable(false);
            jTablePaciente.getColumnModel().getColumn(2).setResizable(false);
            jTablePaciente.getColumnModel().getColumn(3).setResizable(false);
            jTablePaciente.getColumnModel().getColumn(4).setResizable(false);
        }

        jButtonVerificarPaciente.setText("Verificar Paciente Selecionado");
        jButtonVerificarPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVerificarPacienteActionPerformed(evt);
            }
        });

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Registro"));

        jTextFieldId.setEditable(false);

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTablePaciente, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.id}"), jTextFieldId, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jLabel5.setText("ID");

        jLabel6.setText("Nome do Paciente");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTablePaciente, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.nomePaciente}"), jTextFieldNomePaciente, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        buttonGroup1.add(jRadioButtonMasc);
        jRadioButtonMasc.setText("Masculino");
        jRadioButtonMasc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonMascActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButtonFem);
        jRadioButtonFem.setText("Feminino");
        jRadioButtonFem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonFemActionPerformed(evt);
            }
        });

        jLabel8.setText("Sexo");

        jLabel9.setText("Nascimento");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTablePaciente, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.selecionado}"), jCheckBoxSelecionado, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        jCheckBoxSelecionado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxSelecionadoActionPerformed(evt);
            }
        });

        jLabel10.setText("Escolher Paciente para conversar?");
        jLabel10.setToolTipText("");

        picker.setName(""); // NOI18N

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jTextFieldNomePaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel8)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButtonFem)
                            .addComponent(jRadioButtonMasc)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jTextFieldId, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel9)
                        .addGap(18, 18, 18)
                        .addComponent(picker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(131, 131, 131)
                        .addComponent(jCheckBoxSelecionado)
                        .addGap(116, 116, 116))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel10)
                        .addGap(42, 42, 42))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jRadioButtonMasc)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jRadioButtonFem))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(jLabel9)
                            .addComponent(picker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jTextFieldNomePaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(18, 18, 18)
                        .addComponent(jCheckBoxSelecionado)
                        .addGap(11, 11, 11)))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jButtonSalvar.setText("Registrar Paciente");
        jButtonSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSalvarActionPerformed(evt);
            }
        });

        jButtonExcluir.setText("Excluir Paciente Selecionado");
        jButtonExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExcluirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jButtonVerificarPaciente)
                .addGap(110, 110, 110)
                .addComponent(jButtonSalvar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonExcluir)
                .addGap(27, 27, 27))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonVerificarPaciente)
                    .addComponent(jButtonSalvar)
                    .addComponent(jButtonExcluir))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(128, 128, 128))
        );

        jTextFieldIP.setEnabled(false);

        jLabel1.setText("IP");

        jButtonAnal.setText("Análises de Áudio pendentes");
        jButtonAnal.setEnabled(false);
        jButtonAnal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnalActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jLabel1)
                        .addGap(34, 34, 34)
                        .addComponent(jTextFieldIP, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(139, 139, 139)
                        .addComponent(jButtonAnal)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonHelp, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonAnal)
                            .addComponent(jTextFieldIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addContainerGap(36, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jButtonHelp)
                                .addContainerGap())
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(26, 26, 26))))))
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonConfirmarRespActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConfirmarRespActionPerformed
        try {
            boolean respreg = true;
            boolean senhareg = true;
            if (this.jTextFieldResp.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Digite algum nome para o Responsável!", "Nome", 0);
                respreg = false;
            }
            if (this.jTextFieldResp.getText().length() > 30) {
                JOptionPane.showMessageDialog(null, "Não digite um nome muito grande!", "Nome", 0);
                respreg = false;
            }
            if (!(String.copyValueOf(jPasswordField1.getPassword()).length() >= 5 && String.copyValueOf(jPasswordField1.getPassword()).length() <= 15)) {
                JOptionPane.showMessageDialog(null, "Senha de no minímo 5 e máximo 15 caracteres!", "Senha", 0);
                jPasswordField1.setText("");
                jPasswordField2.setText("");
                senhareg = false;
            }
            if (respreg && senhareg) {
                if (String.copyValueOf(jPasswordField1.getPassword()).equals(String.copyValueOf(jPasswordField2.getPassword()))) {
                    Responsavel responsavel = new Responsavel();

                    responsavel.setNomeResponsavel(this.jTextFieldResp.getText());
                    responsavel.setSenhaResponsavel(String.copyValueOf(jPasswordField1.getPassword()));

                    if (responsavel.armazenado()) {
                        this.setEnableBot();
                        URL imageUrl = this.getClass().getResource("/Imagens/Verde.png");
                        ImageIcon icon = new ImageIcon(imageUrl);
                        Image img = icon.getImage();
                        icon = new ImageIcon(img);
                        respop = true;
                        int rowp = jTableResp.getSelectedRow();
                        this.responsavelList.remove(this.jTableResp.getSelectedRow());
                        this.responsavelList.add(rowp, responsavel);
                        this.jTableResp.setRowSelectionInterval(rowp, rowp);

                        jTextFieldResp.setText("");
                        jPasswordField1.setText("");
                        jPasswordField2.setText("");
                        this.jLabelResponsavel.setEnabled(false);
                        this.jLabelSenha.setEnabled(false);
                        this.jTextFieldResp.setEditable(false);
                        this.jTextFieldResp.setFocusable(false);
                        this.jPasswordField1.setEditable(false);
                        this.jPasswordField2.setEditable(false);
                        this.jButtonConfirmarResp.setEnabled(false);

                    }
                } else {
                    JOptionPane.showMessageDialog(null, "As senhas não são iguais!", "Senha", 0);
                    jPasswordField1.setText("");
                    jPasswordField2.setText("");
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e);
        }

    }//GEN-LAST:event_jButtonConfirmarRespActionPerformed

    private void setDisabled() {
        this.jToggleButtonFem.setEnabled(false);
        this.jToggleButtonMasc.setEnabled(false);
        this.jButtonConfirmarBot.setEnabled(false);
        this.jTextFieldNomeBot.setEnabled(false);
        this.jLabelChoose.setEnabled(false);
        this.jLabelNomeB.setEnabled(false);
        this.jTextFieldNomePaciente.setEnabled(false);
        this.picker.setEnabled(false);
        this.jRadioButtonFem.setEnabled(false);
        this.jRadioButtonMasc.setEnabled(false);
        this.jButtonSalvar.setEnabled(false);
        this.jLabel5.setEnabled(false);
        this.jLabel6.setEnabled(false);
        this.jLabel8.setEnabled(false);
        this.jLabel9.setEnabled(false);
        this.jLabel10.setEnabled(false);
        this.jCheckBoxSelecionado.setEnabled(false);
        this.jTablePaciente.setEnabled(false);
    }

    private void setEnableBot() {
        this.jToggleButtonFem.setEnabled(true);
        this.jToggleButtonMasc.setEnabled(true);
        this.jButtonConfirmarBot.setEnabled(true);
        this.jTextFieldNomeBot.setEnabled(true);
        this.jLabelChoose.setEnabled(true);
        this.jLabelNomeB.setEnabled(true);
    }

    private void setEnabled() {
        this.jToggleButtonFem.setEnabled(true);
        this.jToggleButtonMasc.setEnabled(true);
        this.jButtonConfirmarBot.setEnabled(true);
        this.jTextFieldNomeBot.setEnabled(true);
        this.jLabelChoose.setEnabled(true);
        this.jLabelNomeB.setEnabled(true);
        this.jTextFieldNomePaciente.setEnabled(true);
        this.picker.setEnabled(true);
        this.jRadioButtonFem.setEnabled(true);
        this.jRadioButtonMasc.setEnabled(true);
        this.jButtonSalvar.setEnabled(true);
        this.jLabel5.setEnabled(true);
        this.jLabel6.setEnabled(true);
        this.jLabel8.setEnabled(true);
        this.jLabel9.setEnabled(true);
        this.jLabel10.setEnabled(true);
        this.jCheckBoxSelecionado.setEnabled(true);
        this.jTablePaciente.setEnabled(true);
    }

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        Connection connection;
        try {
            connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/autismo", "root", "");
            java.sql.Statement stmtp = connection.createStatement();
            String sqlp = "SELECT id FROM estatistica";
            ResultSet rsp = stmtp.executeQuery(sqlp);

            Estatistica estatistica = new Estatistica();

            boolean encontradoAnalise = false;
            boolean naoEncontrado = false;

            rsp.beforeFirst();
            rsp.next();

            if (!pacienteList.isEmpty()) {
                while (!encontradoAnalise && !naoEncontrado) {

                    if (rsp.isAfterLast()) {
                        naoEncontrado = true;
                    } else {
                        Long id = rsp.getLong("id");
                        estatistica.encontradoId(id);

                        if (estatistica.getNota2() != null) {
                            if (estatistica.getNota2() == -0.1) {
                                encontradoAnalise = true;
                            }
                        }

                        rsp.next();

                    }

                }
            }

            if (encontradoAnalise) {
                JOptionPane.showMessageDialog(null, "Há Análises de Áudio pendentes!\nConsulte quais nessa mesma tela", "Análise", 1);
                this.jButtonAnal.setEnabled(true);
            }

        } catch (Exception ex) {
            ex.printStackTrace();
        }

        try {
            this.jTextFieldIP.setText(Inet4Address.getLocalHost().getHostAddress());
        } catch (Exception e) {
            e.printStackTrace();
        }

        if (!responsavelList.isEmpty()) {
            respop = true;
            this.jLabelResponsavel.setEnabled(false);
            this.jLabelSenha.setEnabled(false);
            this.jTextFieldResp.setEditable(false);
            this.jTextFieldResp.setFocusable(false);
            this.jPasswordField1.setEditable(false);
            this.jPasswordField2.setEditable(false);
            this.jButtonConfirmarResp.setEnabled(false);
            setTitle("SheldonChat - Configuração do Responsável " + this.jTableResp.getModel().getValueAt(0, 0).toString());
        } else {
            setDisabled();
            respop = false;

            JOptionPane.showMessageDialog(null, "Parece que você não tem um Responsável cadastrado\nCadastre-se para poder registrar pacientes e um bot!", "Cadastro", 1);

            setTitle("SheldonChat - Configuração do Responsável");
        }

        if (!botList.isEmpty()) {
            URL imageUrl = this.getClass().getResource("/Imagens/Verde.png");
            ImageIcon icon = new ImageIcon(imageUrl);
            Image img = icon.getImage();
            icon = new ImageIcon(img);
            botop = true;
            if (this.jTableBot.getModel().getValueAt(0, 1).toString().equals("Masculino")) {
                this.jToggleButtonMasc.setSelected(true);
            } else if (this.jTableBot.getModel().getValueAt(0, 1).toString().equals("Feminino")) {
                this.jToggleButtonFem.setSelected(true);
            }
            this.jToggleButtonMasc.setEnabled(false);
            this.jToggleButtonFem.setEnabled(false);
            this.jLabelChoose.setEnabled(false);
            this.jLabelNomeB.setEnabled(false);
            this.jTextFieldNomeBot.setEnabled(false);
            this.jTextFieldNomeBot.setText(this.jTableBot.getModel().getValueAt(0, 1).toString());
            this.jButtonConfirmarBot.setEnabled(false);
        } else {
            botop = false;
        }

        if (!pacienteList.isEmpty()) {
            URL imageUrl = this.getClass().getResource("/Imagens/Verde.png");
            ImageIcon icon = new ImageIcon(imageUrl);
            Image img = icon.getImage();
            icon = new ImageIcon(img);
            pacop = true;
        } else {
            picker.setDate(Calendar.getInstance().getTime());
            picker.setFormats(new SimpleDateFormat("dd/MM/yyyy"));
            pacop = false;
        }

        if (respop && !botop && !pacop) {
            this.setDisabled();
            this.setEnableBot();
        }

        String sex = "";
        for (int i = 0;
                i < 100; i++) {
            Paciente paciente = new Paciente();
            this.pacienteList.add(paciente);
        }

        Bot bot = new Bot();

        this.botList.add(bot);

        this.jTableBot.setRowSelectionInterval(
                0, 0);

        Responsavel responsavel = new Responsavel();

        this.responsavelList.add(responsavel);

        this.jTableResp.setRowSelectionInterval(
                0, 0);

        if (this.jTablePaciente.getRowCount()
                > 0) {
            this.jTablePaciente.setRowSelectionInterval(0, 0);
            int row = jTablePaciente.getSelectedRow();
            if (!this.jTextFieldId.getText().equals("")) {
                Paciente p = new Paciente();
                p.encontradoId(Long.parseLong(this.jTextFieldId.getText()));
                picker.setDate(p.getIdadePaciente());
                sex = p.getSexoPaciente();
            }
        }

        if (sex.equals(
                "Masculino")) {
            this.jRadioButtonMasc.setSelected(true);
        } else if (sex.equals(
                "Feminino")) {
            this.jRadioButtonFem.setSelected(true);
        } else {
            this.buttonGroup1.clearSelection();
        }

        if (this.jTextFieldId.getText()
                .equals("")) {
            this.jButtonExcluir.setEnabled(false);
            this.jButtonVerificarPaciente.setEnabled(false);
            if (jTableResp.getRowCount() > 1 && jTableBot.getRowCount() > 1) {
                if (this.jTableResp.getModel().getValueAt(0, 0).equals(null) || responsavelList.isEmpty()) {
                    this.jButtonSalvar.setEnabled(false);
                } else {
                    this.jButtonSalvar.setEnabled(true);
                }
            }
        } else {
            this.jButtonExcluir.setEnabled(true);
            this.jButtonVerificarPaciente.setEnabled(true);
            this.jButtonSalvar.setEnabled(false);
        }

        picker.setFormats(
                new SimpleDateFormat("dd/MM/yyyy"));

        try {
            InputStream in = Main.class.getResourceAsStream("/Sons/Config.wav");
            InputStream bufferedIn = new BufferedInputStream(in);
            AudioInputStream audioStream = AudioSystem.getAudioInputStream(bufferedIn);
            clip = AudioSystem.getClip();
            clip.open(audioStream);
            clip.start();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);

        }
    }//GEN-LAST:event_formWindowOpened

    private void jButtonSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSalvarActionPerformed
        try {
            boolean nomep = true;
            boolean sexop = true;
            boolean idadep = true;

            Paciente paciente = new Paciente();

            paciente.setNomePaciente(this.jTextFieldNomePaciente.getText());

            if (this.jTextFieldNomePaciente.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Digite algum nome para o Paciente!", "Nome", 0);
                nomep = false;
            }
            if (this.jTextFieldNomePaciente.getText().length() > 30) {
                JOptionPane.showMessageDialog(null, "Não digite um nome grande!", "Nome", 0);
                nomep = false;
            }
            if (this.jRadioButtonMasc.isSelected()) {
                paciente.setSexoPaciente("Masculino");
            } else if (this.jRadioButtonFem.isSelected()) {
                paciente.setSexoPaciente("Feminino");
            } else {
                JOptionPane.showMessageDialog(null, "Selecione algum sexo para o Paciente!", "Nome", 0);
                sexop = false;
            }

            if (picker.getDate() != null) {
                Calendar a = Calendar.getInstance(Locale.FRENCH);
                a.setTime(picker.getDate());
                Calendar b = Calendar.getInstance(Locale.FRENCH);
                b.setTime(Calendar.getInstance().getTime());

                int diff = b.get(YEAR) - a.get(YEAR);
                if (a.get(MONTH) > b.get(MONTH) || (a.get(MONTH) == b.get(MONTH) && a.get(DATE) > b.get(DATE))) {
                    diff--;
                }

                if (diff < 6 || diff > 20) {
                    JOptionPane.showMessageDialog(null, "Digite uma data de nascimento correta!", "Data", 0);
                    picker.setDate(Calendar.getInstance().getTime());
                    idadep = false;
                } else {
                    SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
                    paciente.setIdadePaciente(picker.getDate());
                }
            } else {
                JOptionPane.showMessageDialog(null, "Digite uma data de nascimento correta!", "Data", 0);
                picker.setDate(Calendar.getInstance().getTime());
                idadep = false;
            }

            if (this.jCheckBoxSelecionado.isSelected()) {
                int v = 0;
                while (this.jTablePaciente.getModel().getValueAt(v, 0) != null) {
                    this.jTablePaciente.getModel().setValueAt(false, v, 4);
                    v++;
                }
                for (int i = 0; this.jTablePaciente.getModel().getValueAt(i, 0) != null; i++) {
                    Paciente paciente1 = new Paciente();
                    paciente1.encontradoId(Long.parseLong(this.jTablePaciente.getModel().getValueAt(i, 0).toString()));
                    if (paciente1.getSelecionado()) {
                        paciente1.setSelecionado(false);
                        paciente1.setSexoPaciente(this.jTablePaciente.getModel().getValueAt(i, 2).toString());
                        paciente1.atualizado();
                    }
                }
                paciente.setSelecionado(true);
            } else {
                paciente.setSelecionado(false);
            }

            if (nomep && sexop && idadep) {
                String year = String.valueOf(Calendar.getInstance().get(Calendar.YEAR));
                String month = String.valueOf(Calendar.getInstance().get(Calendar.MONTH) + 1);
                String day = String.valueOf(Calendar.getInstance().get(Calendar.DAY_OF_MONTH));
                String dateLog = day + "/" + month + "/" + year;

                String pathdir = "C:" + File.separator + "SheldonChat" + File.separator + "Logs" + File.separator + paciente.getNomePaciente();
                File dir = new File(pathdir);
                dir.mkdirs();

                String pathfilePaciente = "C:" + File.separator + "SheldonChat" + File.separator + "Logs" + File.separator + paciente.getNomePaciente() + File.separator + this.jTextFieldNomePaciente.getText() + " Log " + day + "-" + month + "-" + year + ".txt";
                File filepaciente = new File(pathfilePaciente);
                filepaciente.createNewFile();
                BufferedWriter outputP = new BufferedWriter(new FileWriter(filepaciente));
                outputP.write("LOG DE CONVERSA - DATA: " + dateLog + " - Paciente: " + this.jTextFieldNomePaciente.getText() + "\n\n");
                outputP.close();

                String pathfileResponsavel = "C:" + File.separator + "SheldonChat" + File.separator + "Logs" + File.separator + paciente.getNomePaciente() + File.separator + this.jTextFieldNomePaciente.getText() + " Anotação " + day + "-" + month + "-" + year + ".txt";
                File fileresponsavel = new File(pathfileResponsavel);
                fileresponsavel.createNewFile();
                BufferedWriter outputR = new BufferedWriter(new FileWriter(fileresponsavel));
                outputR.write("ANOTAÇÕES DO RESPONSÁVEL - DATA: " + dateLog + " - Paciente: " + this.jTextFieldNomePaciente.getText() + "\n\n");
                outputR.close();

                SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");

                if (paciente.armazenado()) {
                    InputStream in = Main.class.getResourceAsStream("/Sons/Criar.wav");
                    InputStream bufferedIn = new BufferedInputStream(in);
                    AudioInputStream audioStream = AudioSystem.getAudioInputStream(bufferedIn);
                    clip = AudioSystem.getClip();
                    clip.open(audioStream);
                    clip.start();

                    Thread.sleep(2000);

                    URL imageUrl = this.getClass().getResource("/Imagens/Verde.png");
                    ImageIcon icon = new ImageIcon(imageUrl);
                    Image img = icon.getImage();
                    icon = new ImageIcon(img);
                    pacop = true;
                    int rowp = 0;
                    for (int i = 0;
                            this.jTablePaciente.getModel()
                            .getValueAt(i, 0) != null; i++) {
                        if (this.jTablePaciente.getModel().getValueAt(i + 1, 0) == null) {
                            rowp = i + 1;
                        }
                    }

                    this.pacienteList.remove(
                            this.jTablePaciente.getSelectedRow());

                    this.pacienteList.add(rowp, paciente);

                    this.jTablePaciente.setRowSelectionInterval(rowp, rowp);

                    if (this.jTextFieldId.getText()
                            .equals("")) {
                        this.jButtonExcluir.setEnabled(false);
                        this.jButtonVerificarPaciente.setEnabled(false);
                        if (this.jTableResp.getModel().getValueAt(0, 0).equals(null)) {
                            this.jButtonSalvar.setEnabled(false);
                        } else {
                            this.jButtonSalvar.setEnabled(true);
                        }
                    } else {
                        this.jButtonExcluir.setEnabled(true);
                        this.jButtonVerificarPaciente.setEnabled(true);
                        this.jButtonSalvar.setEnabled(false);
                    }

                    if (!this.jTableBot.getModel()
                            .getValueAt(0, 0).equals(null)) {
                        Logs logs = new Logs();

                        logs.setData(formatter.parse(dateLog));
                        logs.setIdPaciente(paciente);
                        logs.setNomePaciente(paciente.getNomePaciente());
                        logs.setEnderecoPaciente(filepaciente.getAbsolutePath());
                        logs.setEnderecoResponsavel(fileresponsavel.getAbsolutePath());
                        logs.armazenado();

                        Estatistica estatistica = new Estatistica();

                        estatistica.setIdPaciente(paciente);
                        estatistica.setData(formatter.parse(dateLog));
                        estatistica.setNomePaciente(paciente.getNomePaciente());
                        Bot bot = new Bot();
                        bot.encontradoId(Long.parseLong(this.jTableBot.getModel().getValueAt(0, 0).toString()));
                        estatistica.setIdBot(bot);
                        estatistica.setNomeBot(bot.getNomeBot());

                        estatistica.armazenado();
                    }
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e);
        }
    }//GEN-LAST:event_jButtonSalvarActionPerformed

    private void jButtonExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExcluirActionPerformed
        String[] options = new String[2];
        options[0] = new String("Sim");
        options[1] = new String("Não");

        if (JOptionPane.showOptionDialog(null, "Você tem certeza que quer excluir este Paciente?\nTudo será apagado!", "Pergunta", 0, JOptionPane.INFORMATION_MESSAGE, null, options, null) == JOptionPane.OK_OPTION) {
            String senha = JOptionPane.showInputDialog(null, "Digite a senha do Responsável:", "Autorização", 1);
            Responsavel responsavel = new Responsavel();
            try {
                Connection connection = null;
                connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/autismo", "root", "");
                java.sql.Statement stmtr = connection.createStatement();
                String sqlr = "SELECT id FROM responsavel";
                ResultSet rsr = stmtr.executeQuery(sqlr);

                while (rsr.next()) {
                    Long idr = rsr.getLong("id");
                    responsavel.encontradoId(idr);
                }
            } catch (Exception e) {
            }

            if (senha.equals(responsavel.getSenhaResponsavel())) {
                try {
                    Paciente paciente = new Paciente();
                    //paciente.setId(Long.valueOf(this.jTextFieldId.getText()));
                    paciente.encontradoId(Long.valueOf(this.jTextFieldId.getText()));
                    Logs logs = new Logs();

                    Connection connection = null;
                    connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/autismo", "root", "");
                    java.sql.Statement stmtl = connection.createStatement();
                    String sqll = "SELECT id FROM logs";
                    ResultSet rsl = stmtl.executeQuery(sqll);

                    boolean encontradoPaciente = false;
                    while (rsl.next() && !encontradoPaciente) {
                        Long idl = rsl.getLong("id");
                        logs.encontradoId(idl);
                        if (logs.getNomePaciente().equals(paciente.getNomePaciente())) {
                            encontradoPaciente = true;
                        }
                    }

                    String pathdir = "C:" + File.separator + "SheldonChat" + File.separator + "Logs" + File.separator + paciente.getNomePaciente();
                    File dir = new File(pathdir);
                    FileUtils.deleteDirectory(dir);

                    if (paciente.getFotoPaciente() != null) {
                        File f1 = new File(paciente.getFotoPaciente());
                        f1.delete();

                    }

                    if (paciente.desarmazenado()) {
                        try {
                            InputStream in = Main.class.getResourceAsStream("/Sons/Excluir.wav");
                            InputStream bufferedIn = new BufferedInputStream(in);
                            AudioInputStream audioStream = AudioSystem.getAudioInputStream(bufferedIn);
                            clip = AudioSystem.getClip();
                            clip.open(audioStream);
                            clip.start();

                            Thread.sleep(2000);

                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, e);
                        }
                        int rowp = jTablePaciente.getSelectedRow();
                        int linhaSelecionada = this.jTablePaciente.getSelectedRow();
                        this.pacienteList.remove(this.jTablePaciente.getSelectedRow());
                        if (this.jTablePaciente.getRowCount() > 0) {
                            if (linhaSelecionada > 0) {
                                linhaSelecionada--;
                            }

                        }
                        picker.setDate(Calendar.getInstance().getTime());
                        jTablePaciente.setRowSelectionInterval(rowp, rowp);
                        this.buttonGroup1.clearSelection();

                        if (this.jTablePaciente.getModel().getValueAt(0, 1) == null) {
                            URL imageUrl = this.getClass().getResource("/Imagens/Vermelho.png");
                            ImageIcon icon = new ImageIcon(imageUrl);
                            Image img = icon.getImage();
                            icon = new ImageIcon(img);
                            pacop = false;
                        }

                        if (this.jTextFieldId.getText().equals("")) {
                            this.jButtonExcluir.setEnabled(false);
                            this.jButtonVerificarPaciente.setEnabled(false);
                            if (this.jTableResp.getModel().getValueAt(0, 0).equals(null)) {
                                this.jButtonSalvar.setEnabled(false);
                            } else {
                                this.jButtonSalvar.setEnabled(true);
                            }
                        } else {
                            this.jButtonExcluir.setEnabled(true);
                            this.jButtonVerificarPaciente.setEnabled(true);
                            this.jButtonSalvar.setEnabled(false);
                        }

                        String sex = "";

                        if (!this.jTextFieldId.getText().equals("")) {
                            paciente.encontradoId(Long.parseLong(this.jTextFieldId.getText()));
                            sex = paciente.getSexoPaciente();
                        }
                        if (sex.equals("Masculino")) {
                            this.jRadioButtonMasc.setSelected(true);
                        } else if (sex.equals("Feminino")) {
                            this.jRadioButtonFem.setSelected(true);
                        } else {
                            this.buttonGroup1.clearSelection();
                        }
                    }

                } catch (Exception e) {
                    JOptionPane.showMessageDialog(rootPane, e);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Senha Incorreta!");
            }
        }
    }//GEN-LAST:event_jButtonExcluirActionPerformed

    private void jButtonConfirmarBotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConfirmarBotActionPerformed
        try {
            Bot bot = new Bot();
            boolean sexbot = true;
            boolean nomebot = true;
            bot.setNomeBot(this.jTextFieldNomeBot.getText());

            if (this.jTextFieldNomeBot.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Digite algum nome para o BOT!", "Nome", 0);
                nomebot = false;
            }
            if (this.jTextFieldNomeBot.getText().length() > 30) {
                JOptionPane.showMessageDialog(null, "Não digite um nome muito grande!", "Nome", 0);
                nomebot = false;
            }

            if (this.jToggleButtonMasc.isSelected()) {
                bot.setSexoBot("Masculino");
            } else if (this.jToggleButtonFem.isSelected()) {
                bot.setSexoBot("Feminino");
            } else {
                JOptionPane.showMessageDialog(null, "Selecione um Sexo para o BOT!", "Sexo", 0);
                sexbot = false;
            }
            if (sexbot && nomebot) {
                if (bot.armazenado()) {
                    setEnabled();
                    URL imageUrl = this.getClass().getResource("/Imagens/Verde.png");
                    ImageIcon icon = new ImageIcon(imageUrl);
                    Image img = icon.getImage();
                    icon = new ImageIcon(img);
                    botop = true;
                    int rowp = jTableBot.getSelectedRow();
                    this.botList.remove(this.jTableBot.getSelectedRow());
                    this.botList.add(rowp, bot);
                    this.jTableBot.setRowSelectionInterval(rowp, rowp);

                    this.jToggleButtonMasc.setEnabled(false);
                    this.jToggleButtonFem.setEnabled(false);
                    this.jLabelChoose.setEnabled(false);
                    this.jLabelNomeB.setEnabled(false);
                    this.jTextFieldNomeBot.setEnabled(false);
                    this.jButtonConfirmarBot.setEnabled(false);
                }

            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e);
        }
    }//GEN-LAST:event_jButtonConfirmarBotActionPerformed

    private void jButtonVerificarPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVerificarPacienteActionPerformed
        if (this.jTableResp.getRowCount() >= 1 && this.jTableBot.getRowCount() >= 1) {
            if (!this.jTableBot.getModel().getValueAt(0, 0).equals(null) && !this.jTableResp.getModel().getValueAt(0, 0).equals(null)) {
                Paciente paciente = new Paciente();
                Bot bot = new Bot();
                Logs logs = new Logs();
                paciente.encontradoId(Long.valueOf(this.jTextFieldId.getText()));
                bot.encontradoId(Long.valueOf(this.jTableBot.getModel().getValueAt(0, 0).toString()));

                Connection connection = null;
                try {
                    connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/autismo", "root", "");
                    java.sql.Statement stmtl = connection.createStatement();
                    String sqll = "SELECT id FROM logs";
                    ResultSet rsl = stmtl.executeQuery(sqll);
                    boolean encontradoPaciente = false;
                    rsl.last();
                    while (!encontradoPaciente) {
                        Long idl = rsl.getLong("id");
                        logs.encontradoId(idl);
                        rsl.previous();
                        if (logs.getNomePaciente().equals(paciente.getNomePaciente())) {
                            encontradoPaciente = true;
                        }
                    }
                } catch (Exception e) {
                }

                UserInfo userInfo = new UserInfo(paciente, bot, logs);
                setVisible(false);
                userInfo.setVisible(true);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Cadastre um Responsável e um Bot antes", "Cadastro", 1);
        }
    }//GEN-LAST:event_jButtonVerificarPacienteActionPerformed

    private void jCheckBoxSelecionadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxSelecionadoActionPerformed
        Paciente paciente = new Paciente();
        if (!this.jTextFieldId.getText().equals("")) {
            if (this.jCheckBoxSelecionado.isSelected()) {
                int v = 0;
                int row = this.jTablePaciente.getSelectedRow();
                while (v < jTablePaciente.getRowCount()) {
                    this.jTablePaciente.getModel().setValueAt(false, v, 4);
                    v++;
                }
                this.jTablePaciente.setValueAt(true, row, 4);
                for (int i = 0; this.jTablePaciente.getModel().getValueAt(i, 0) != null; i++) {
                    Paciente paciente1 = new Paciente();
                    paciente1.encontradoId(Long.parseLong(this.jTablePaciente.getModel().getValueAt(i, 0).toString()));
                    if (paciente1.getSelecionado()) {
                        paciente1.setSelecionado(false);
                        paciente1.atualizado();
                    }
                }
                paciente.encontradoId(Long.parseLong(this.jTextFieldId.getText()));
                paciente.setSelecionado(true);
                for (int i = 0; this.jTablePaciente.getModel().getValueAt(i, 0) != null; i++) {
                    if (this.jTablePaciente.getModel().getValueAt(i, 1).toString().equals(paciente.getNomePaciente())) {
                        this.jTablePaciente.setValueAt(true, i, 4);
                    }
                }
                paciente.atualizado();
            } else {
                int v = 0;
                int row = this.jTablePaciente.getSelectedRow();
                while (v < jTablePaciente.getRowCount()) {
                    this.jTablePaciente.getModel().setValueAt(false, v, 4);
                    v++;
                }
                this.jTablePaciente.setValueAt(true, row, 4);
                for (int i = 0; this.jTablePaciente.getModel().getValueAt(i, 0) != null; i++) {
                    Paciente paciente1 = new Paciente();
                    paciente1.encontradoId(Long.parseLong(this.jTablePaciente.getModel().getValueAt(i, 0).toString()));
                    if (paciente1.getSelecionado()) {
                        paciente1.setSelecionado(false);
                        paciente1.atualizado();
                    }
                }
                paciente.encontradoId(Long.parseLong(this.jTextFieldId.getText()));
                paciente.setSelecionado(false);
                for (int i = 0; this.jTablePaciente.getModel().getValueAt(i, 0) != null; i++) {
                    if (this.jTablePaciente.getModel().getValueAt(i, 1).toString().equals(paciente.getNomePaciente())) {
                        this.jTablePaciente.setValueAt(false, i, 4);
                    }
                }
                paciente.atualizado();
            }
        } else {
            if (this.jCheckBoxSelecionado.isSelected()) {
                int v = 0;
                int row = this.jTablePaciente.getSelectedRow();
                while (v < jTablePaciente.getRowCount()) {
                    this.jTablePaciente.getModel().setValueAt(false, v, 4);
                    v++;
                }
                this.jTablePaciente.setValueAt(true, row, 4);
                for (int i = 0; this.jTablePaciente.getModel().getValueAt(i, 0) != null; i++) {
                    Paciente paciente1 = new Paciente();
                    paciente1.encontradoId(Long.parseLong(this.jTablePaciente.getModel().getValueAt(i, 0).toString()));
                    if (paciente1.getSelecionado()) {
                        paciente1.setSelecionado(false);
                        paciente1.atualizado();
                    }
                }

                for (int i = 0; this.jTablePaciente.getModel().getValueAt(i, 0) != null; i++) {
                    if (this.jTablePaciente.getModel().getValueAt(i, 1).toString().equals(paciente.getNomePaciente())) {
                        this.jTablePaciente.setValueAt(true, i, 4);
                    }
                }

            } else {
                int v = 0;
                int row = this.jTablePaciente.getSelectedRow();
                while (this.jTablePaciente.getModel().getValueAt(v, 0) != null) {
                    this.jTablePaciente.getModel().setValueAt(false, v, 4);
                    v++;
                }
                this.jTablePaciente.setValueAt(false, row, 4);
                for (int i = 0; this.jTablePaciente.getModel().getValueAt(i, 0) != null; i++) {
                    Paciente paciente1 = new Paciente();
                    paciente1.encontradoId(Long.parseLong(this.jTablePaciente.getModel().getValueAt(i, 0).toString()));
                    if (paciente1.getSelecionado()) {
                        paciente1.setSelecionado(false);
                        paciente1.atualizado();
                    }
                }

                for (int i = 0; this.jTablePaciente.getModel().getValueAt(i, 0) != null; i++) {
                    if (this.jTablePaciente.getModel().getValueAt(i, 1).toString().equals(paciente.getNomePaciente())) {
                        this.jTablePaciente.setValueAt(false, i, 4);
                    }
                }
            }
        }
    }//GEN-LAST:event_jCheckBoxSelecionadoActionPerformed

    private void jTablePacienteMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTablePacienteMousePressed
        String sex = "";

        int row = jTablePaciente.getSelectedRow();

        boolean chosen = false;

        if (!this.jTextFieldId.getText().equals("")) {
            chosen = (Boolean) this.jTablePaciente.getValueAt(row, 4);
        } else {
            this.jCheckBoxSelecionado.setSelected(false);

        }

        if (chosen) {
            this.jCheckBoxSelecionado.setSelected(true);
        } else {
            this.jCheckBoxSelecionado.setSelected(false);
        }

        if (!this.jTextFieldId.getText().equals("")) {
            Paciente p = new Paciente();
            p.encontradoId(Long.parseLong(this.jTextFieldId.getText()));
            picker.setDate(p.getIdadePaciente());
            sex = p.getSexoPaciente();
        }

        if (sex.equals("Masculino")) {
            this.jRadioButtonMasc.setSelected(true);
        } else if (sex.equals("Feminino")) {
            this.jRadioButtonFem.setSelected(true);
        } else {
            this.buttonGroup1.clearSelection();
        }

        if (this.jTextFieldId.getText().equals("")) {
            this.jButtonExcluir.setEnabled(false);
            this.jButtonVerificarPaciente.setEnabled(false);
            if (jTableResp.getRowCount() >= 1 && jTableBot.getRowCount() >= 1) {
                if (this.jTableResp.getModel().getValueAt(0, 0) == null || responsavelList.isEmpty()) {
                    this.jButtonSalvar.setEnabled(false);
                } else {
                    this.jButtonSalvar.setEnabled(true);
                }
            }
            picker.setDate(Calendar.getInstance().getTime());
        } else {
            this.jButtonExcluir.setEnabled(true);
            this.jButtonVerificarPaciente.setEnabled(true);
            this.jButtonSalvar.setEnabled(false);
        }
    }//GEN-LAST:event_jTablePacienteMousePressed

    private void jTablePacienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTablePacienteMouseClicked
        String sex = "";
        boolean chosen = false;
        int row = jTablePaciente.getSelectedRow();

        if (!this.jTextFieldId.getText().equals("")) {
            chosen = (Boolean) this.jTablePaciente.getValueAt(row, 4);
        } else {
            this.jCheckBoxSelecionado.setSelected(false);
        }
        if (chosen) {
            this.jCheckBoxSelecionado.setSelected(true);
        } else {
            this.jCheckBoxSelecionado.setSelected(false);
        }

        if (!this.jTextFieldId.getText().equals("")) {
            Paciente p = new Paciente();
            p.encontradoId(Long.parseLong(this.jTextFieldId.getText()));
            picker.setDate(p.getIdadePaciente());
            sex = p.getSexoPaciente();
        }

        if (sex.equals("Masculino")) {
            this.jRadioButtonMasc.setSelected(true);
        } else if (sex.equals("Feminino")) {
            this.jRadioButtonFem.setSelected(true);
        } else {
            this.buttonGroup1.clearSelection();
        }

        if (this.jTextFieldId.getText().equals("")) {
            this.jButtonExcluir.setEnabled(false);
            this.jButtonVerificarPaciente.setEnabled(false);
            if (jTableResp.getRowCount() >= 1 && jTableBot.getRowCount() >= 1) {
                if (this.jTableResp.getModel().getValueAt(0, 0) == null || responsavelList.isEmpty()) {
                    this.jButtonSalvar.setEnabled(false);
                } else {
                    this.jButtonSalvar.setEnabled(true);
                }
            }
            picker.setDate(Calendar.getInstance().getTime());
        } else {
            this.jButtonExcluir.setEnabled(true);
            this.jButtonVerificarPaciente.setEnabled(true);
            this.jButtonSalvar.setEnabled(false);
        }
    }//GEN-LAST:event_jTablePacienteMouseClicked

    private void jRadioButtonMascActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMascActionPerformed
        if (this.jTextFieldId.getText().equals("")) {
            this.jTablePaciente.setValueAt("Masculino", jTablePaciente.getSelectedRow(), 3);
        }
    }//GEN-LAST:event_jRadioButtonMascActionPerformed

    private void jRadioButtonFemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonFemActionPerformed
        if (this.jTextFieldId.getText().equals("")) {
            this.jTablePaciente.setValueAt("Feminino", jTablePaciente.getSelectedRow(), 3);
        }
    }//GEN-LAST:event_jRadioButtonFemActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        String[] options = new String[2];
        options[0] = new String("Sim");
        options[1] = new String("Não");

        if (JOptionPane.showOptionDialog(null, "Você tem certeza que quer sair do programa?", "Pergunta", 0, JOptionPane.INFORMATION_MESSAGE, null, options, null) == JOptionPane.OK_OPTION) {
            System.exit(0);
        }
    }//GEN-LAST:event_formWindowClosing

    private void jButtonAnalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnalActionPerformed
        AnaPen anaPen = new AnaPen();
        anaPen.setVisible(true);
    }//GEN-LAST:event_jButtonAnalActionPerformed

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        //if (evt.getKeyCode() == KeyEvent.VK_ALT) {
        JOptionPane.showMessageDialog(null, "OI");
        //}
    }//GEN-LAST:event_formKeyPressed

    private class MyDispatcher implements KeyEventDispatcher {

        boolean alt = false;
        boolean f = false;
        boolean g = false;
        boolean v = false;

        @Override
        public boolean dispatchKeyEvent(KeyEvent e) {
            if (e.getID() == KeyEvent.KEY_PRESSED) {

                if (e.getKeyCode() == KeyEvent.VK_ALT) {
                    alt = true;
                }
                if (e.getKeyCode() == KeyEvent.VK_F1) {
                    f = true;
                }
                if (e.getKeyCode() == KeyEvent.VK_G) {
                    g = true;
                }
                if (e.getKeyCode() == KeyEvent.VK_V) {
                    v = true;
                }
                if (f && alt && g && v) {
                    f = false;
                    alt = false;
                    g = false;
                    v = false;
                    try {
                        JOptionPane.showMessageDialog(null, "Formatando dados do Programa!", "Formatação", 1);
                        String pathdir = "C:" + File.separator + "SheldonChat";
                        File dir = new File(pathdir);
                        FileUtils.deleteDirectory(dir);
                        Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/autismo", "root", "");
                        java.sql.Statement stmtp = connection.createStatement();
                        stmtp.executeUpdate("DROP DATABASE autismo");
                        java.sql.Statement stmta = connection.createStatement();
                        stmta.executeUpdate("CREATE DATABASE autismo");
                        System.exit(0);
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                }
            }
            return false;
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.persistence.EntityManager SCA13ProjectPUEntityManager;
    private java.util.List<Controle.Bot> botList;
    private javax.persistence.Query botQuery;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jButtonAnal;
    private javax.swing.JButton jButtonConfirmarBot;
    private javax.swing.JButton jButtonConfirmarResp;
    private javax.swing.JButton jButtonExcluir;
    private javax.swing.JButton jButtonHelp;
    private javax.swing.JButton jButtonSalvar;
    private javax.swing.JButton jButtonVerificarPaciente;
    private javax.swing.JCheckBox jCheckBoxSelecionado;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelChoose;
    private javax.swing.JLabel jLabelNomeB;
    private javax.swing.JLabel jLabelResponsavel;
    private javax.swing.JLabel jLabelSenha;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JPasswordField jPasswordField2;
    private javax.swing.JRadioButton jRadioButtonFem;
    private javax.swing.JRadioButton jRadioButtonMasc;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTable jTableBot;
    private javax.swing.JTable jTablePaciente;
    private javax.swing.JTable jTableResp;
    private javax.swing.JTextField jTextFieldIP;
    private javax.swing.JTextField jTextFieldId;
    private javax.swing.JTextField jTextFieldNomeBot;
    private javax.swing.JTextField jTextFieldNomePaciente;
    private javax.swing.JTextField jTextFieldResp;
    private javax.swing.JToggleButton jToggleButtonFem;
    private javax.swing.JToggleButton jToggleButtonMasc;
    private java.util.List<Controle.Paciente> pacienteList;
    private javax.persistence.Query pacienteQuery;
    private org.jdesktop.swingx.JXDatePicker picker;
    private java.util.List<Controle.Responsavel> responsavelList;
    private javax.persistence.Query responsavelQuery;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
